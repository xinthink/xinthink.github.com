Amazon DynamoDB – a Fast and Scalable NoSQL Database Service Designed for Internet Scale Applications
亚马逊 DynamoDB - 为互联网应用设计的快速、可伸缩的NoSQL数据库服务
By Werner Vogels on 18 January 2012 07:00 AM | Permalink | Comments (47)
Today is a very exciting day as we release Amazon DynamoDB, a fast, highly reliable and cost-effective NoSQL database service designed for internet scale applications. DynamoDB is the result of 15 years of learning in the areas of large scale non-relational databases and cloud services. Several years ago we published a paper on the details of Amazon’s Dynamo technology, which was one of the first non-relational databases developed at Amazon. The original Dynamo design was based on a core set of strong distributed systems principles resulting in an ultra-scalable and highly reliable database system. Amazon DynamoDB, which is a new service, continues to build on these principles, and also builds on our years of experience with running non-relational databases and cloud services, such as Amazon SimpleDB and Amazon S3, at scale. It is very gratifying to see all of our learning and experience become available to our customers in the form of an easy-to-use managed service.
今天是一个令人激动的日子，我们在今天发布了一个专为互联网规模的应用设计的快速、可靠并且低成本的NoSQL数据库服务，Amazon DynamoDB。DynamoDB是亚马逊在大规模非关系型数据库和云服务领域15年经验积累的成果。几年前，我们发表了一篇关于亚马逊Dynamo技术细节的论文，那是亚马逊开发的第一批非关系型数据库之一，Dynamo的初创设计是基于一系列强大的分布式系统核心理念, 目的在于打造一个无限可扩展、高度可靠的数据库系统。Amazon DynamoDB继续沿用了这些原理，并且在这基础上融入了我们多年以来运营大规模非关系型数据库和云服务（如Amazon SimpleDB和Amazon S3）的经验，从而造就的一个新的服务。令人欣喜的是，我们积累的所有经验教训将通过一个易于使用的托管服务提供给我们的客户。
Amazon DynamoDB is a fully managed NoSQL database service that provides fast performance at any scale. Today’s web-based applications often encounter database scaling challenges when faced with growth in users, traffic, and data. With Amazon DynamoDB, developers scaling cloud-based applications can start small with just the capacity they need and then increase the request capacity of a given table as their app grows in popularity. Their tables can also grow without limits as their users store increasing amounts of data. Behind the scenes, Amazon DynamoDB automatically spreads the data and traffic for a table over a sufficient number of servers to meet the request capacity specified by the customer. Amazon DynamoDB offers low, predictable latencies at any scale. Customers can typically achieve average service-side in the single-digit milliseconds. Amazon DynamoDB stores data on Solid State Drives (SSDs) and replicates it synchronously across multiple AWS Availability Zones in an AWS Region to provide built-in high availability and data durability.
Amazon DynamoDB是一个完全托管的服务，能够满足任意数据规模的高性能处理需求。今天的Web应用，随着用户、流量、数据规模的日益增长，都面临着数据库扩展的挑战。使用Amazon DynamoDB，开发者可以在初期只提供一个刚好满足容量需求的云端应用，之后随着应用的推广，可以根据特定数据表的规模要求进行扩展，数据表允许随着用户储存数据量的增长而进行无限的扩展。在幕后，Amazon DynamoDB将会自动将特定数据表的数据和流量分布到足够数量的服务器上，以满足客户指定的规模需求。Amazon DynamoDB能够保证任意规模下可预见的、低延迟的响应要求，客户通常的服务端平均时延可以达到10毫秒以内的水平。Amazon DynamoDB将数据保存在固态硬盘（SSD），并且进行跨分区的同步复制（同一AWS Region内的多个AWS Availability Zones），从而提供内建的高可靠性和数据持久性。
History of NoSQL at Amazon – Dynamo
NoSQL在亚马逊的应用历史 - Dynamo
The Amazon.com ecommerce platform consists of hundreds of decoupled services developed and managed in a decentralized fashion. Each service encapsulates its own data and presents a hardened API for others to use. Most importantly, direct database access to the data from outside its respective service is not allowed. This architectural pattern was a response to the scaling challenges that had challenged Amazon.com through its first 5 years, when direct database access was one of the major bottlenecks in scaling and operating the business. While a service-oriented architecture addressed the problems of a centralized database architecture, each service was still using traditional data management systems. The growth of Amazon’s business meant that many of these services needed more scalable database solutions.
Amazon.com电子商务平台由数百个低耦合的服务组成，这些服务都是以一种无中心的形式开发和管理的。每一个服务都封装了自己的数据，仅通过相对固定的API提供给其他服务。最重要的一点，我们禁止跨服务的数据库直接访问。这样的架构模式是我们应对扩展性挑战的结果，扩展性问题曾经在Amazon.com的头5年中对我们构成了挑战，当时直接的数据库访问曽是业务扩展和运营的主要瓶颈之一。然而，面向服务的架构虽然解决了集中式数据库架构的问题，但是每个服务本身仍然在使用传统的数据管理系统，亚马逊的业务增长导致了许多这样的系统需要一个具有更强扩展性的数据库解决方案。
In response, we began to develop a collection of storage and database technologies to address the demanding scalability and reliability requirements of the Amazon.com ecommerce platform. We had been pushing the scalability of commercially available technologies to their limits and finally reached a point where these third party technologies could no longer be used without significant risk. This was not our technology vendors’ fault; Amazon's scaling needs were beyond the specs for their technologies and we were using them in ways that most of their customers were not. A number of outages at the height of the 2004 holiday shopping season can be traced back to scaling commercial technologies beyond their boundaries.
于是，我们开始开发一系列的存储和数据库技术，以应对Amazon.com电子商务平台的伸缩性和可靠性的要求。我们曾经尝试将商业化技术的扩展性推到了极限，最终发现在突破一个临界点之后，这些第三方技术已经不能够在没有任何显著风险的情况下使用了。这并不是技术提供商的错，Amazon的扩展性需求超出了他们的技术规格，并且我们的使用方式也与他们的大部分客户不同。2004年假期购物节高峰时段的多次服务中断都可以归结为扩展性超出了商业技术的规格所致。
Dynamo was born out of our need for a highly reliable, ultra-scalable key/value database. This non-relational, or NoSQL, database was targeted at use cases that were core to the Amazon ecommerce operation, such as the shopping cart and session service. Any downtime or performance degradation in these services has an immediate financial impact and their fault-tolerance and performance requirements for their data systems are very strict. These services also require the ability to scale infrastructure incrementally to accommodate growth in request rates or dataset sizes. Another important requirement for Dynamo was predictability. This is not just predictability of median performance and latency, but also at the end of the distribution (the 99.9th percentile), so we could provide acceptable performance for virtually every customer.
Dynamo诞生于我们对高可靠、极度可伸缩的键/值数据库的需要。这个非关系型（或NoSQL）数据库是针对Amazon电子商务运营的核心场景，如购物车和会话服务。这些服务任何的宕机或者性能下降都会对财务有直接的冲击，并且它们对于容错能力和性能的要求是非常严格的，这些服务还要求基础设施能够增量的扩展以应对请求率或数据集规模的增长。对Dynamo另一个重要的要求是可预见性，这并不仅是对于性能和延迟平均水平的预测，还包括分布的末端（第99.9个百分位数），这样我们就可以为几乎每一位顾客提供可接受的性能。
To achieve all of these goals, we needed to do groundbreaking work. After the successful launch of the first Dynamo system, we documented our experiences in a paper so others could benefit from them. Since then, several Dynamo clones have been built and the Dynamo paper has been the basis for several other types of distributed databases. This demonstrates that Amazon is not the only company than needs better tools to meet their database needs.
为了实现所有这些目标，我们需要做的是开创性工作。第一版的Dynamo系统成功推出后，我们在一篇论文中记录了我们的经验，以便其他人可以从中受益。自那时以来，现在已构建了多个Dynamo的克隆，Dynamo论文也成为了数个其他类型的分布式数据库的基础。这表明，亚马逊并不是唯一需要更好工具以满足数据库需求的公司。
Lessons learned from Amazon's Dynamo
亚马逊Dynamo的经验教训
Dynamo has been in use by a number of core services in the ecommerce platform, and their engineers have been very satisfied by its performance and incremental scalability. However, we never saw much adoption beyond these core services. This was remarkable because although Dynamo was originally built to serve the needs of the shopping cart, its design and implementation were much broader and based on input from many other service architects. As we spoke to many senior engineers and service owners, we saw a clear pattern start to emerge in their explanations of why they didn't adopt Dynamo more broadly: while Dynamo gave them a system that met their reliability, performance, and scalability needs, it did nothing to reduce the operational complexity of running large database systems. Since they were responsible for running their own Dynamo installations, they had to become experts on the various components running in multiple data centers. Also, they needed to make complex tradeoff decisions between consistency, performance, and reliability. This operational complexity was a barrier that kept them from adopting Dynamo.
Dynamo已应用在电子商务平台的许多核心应用中，工程师们对它的性能和增量扩展的能力已经非常满意，但是，它却从未在这些核心服务以外得到应用。这是一个值得关注的现象，虽然Dynamo最初是为购物车的需要而构建，但是它的设计和实现都面向了更广泛的目标，并且以很多其他服务的架构为输入。在我们和许多高级工程师和服务负责人谈话的过程中，当他们谈及为何没有更广泛的应用Dynamo时，我们找到了一个清晰的模式：虽然Dynamo能够提供一个满足他们可靠性、性能和扩展性的要求，但是它却没有能够降低运维大型数据库系统的复杂性。由于他们需要运维自己的Dynamo系统，因此他们需要成为不同组件的专家，而这些组件是运行在多个数据中心里的，并且他们需要在一致性、性能、可靠性之间做复杂的权衡决定。运维的复杂性就成为了他们采用Dynamo的障碍。
During this period, several other systems appeared in the Amazon ecosystem that did meet their requirements for simplified operational complexity, notably Amazon S3 and Amazon SimpleDB. These were built as managed web services that eliminated the operational complexity of managing systems while still providing extremely high durability. Amazon engineers preferred to use these services instead of managing their own databases like Dynamo, even though Dynamo's functionality was better aligned with their applications’ needs.
在此期间，Amazon生态系统中出现了几个其他系统，它们满足了简化运维复杂性的需求，特别是Amazon S3和Amazon SimpleDB。它们被构建为托管的Web服务，构建它们的目的是消除系统的运维复杂性，同时仍然具有极高的可靠性。亚马逊工程师们更倾向于使用这些服务，而不是管理自己的像Dynamo这样的数据库，即使Dynamo的功能更好地与他们的应用程序的需求相一致。
With Dynamo we had taken great care to build a system that met the requirements of our engineers. After evaluations, it was often obvious that Dynamo was ideal for many database use cases. But ... we learned that engineers found the prospect of running a large software system daunting and instead looked for less ideal design alternatives that freed them from the burden of managing databases and allowed them to focus on their applications.
对于Dynamo，我们采取了非常谨慎的考虑，以构建一个符合我们的工程师要求的系统。经过评估，Dynamo比较明显的在许多数据库的使用场景下成为理想的选择，但是...... 我们了解到，运行大型软件系统的艰巨前景会令工程师们望而却步，而看起来不太理想的设计替代方案，却能够将他们从数据库管理的负担中解放出来，从而把重点放在业务应用方面。
It became obvious that developers strongly preferred simplicity to fine-grained control as they voted "with their feet" and adopted cloud-based AWS solutions, like Amazon S3 and Amazon SimpleDB, over Dynamo. Dynamo might have been the best technology in the world at the time but it was still software you had to run yourself. And nobody wanted to learn how to do that if they didn’t have to. Ultimately, developers wanted a service.
明显地，开发者强烈的倾向于简单而不是细粒度的控制，这是他们“用自己的脚”投的票，他们更多采用云端的AWS方案，如Amazon S3和Amazon SimpleDB，而非Dynamo。Dynamo可能在当时已经在世界上最好的技术，但它仍然是需要你自己运行的软件，没有人想学习如何做到这一点，如果他们不是必须要这么做。开发者最终想要的是服务。
History of NoSQL at Amazon - SimpleDB
NoSQL在亚马逊的应用历史 - SimpleDB
One of the cloud services Amazon developers preferred for their database needs was Amazon SimpleDB. In the 5 years that SimpleDB has been operational, we have learned a lot from its customers.
Amazon SimpleDB是亚马逊开发者们首选的数据库服务之一。SimpleDB运营5年来，我们从它的客户身上学到了很多。
First and foremost, we have learned that a database service that takes away the operational headache of managing distributed systems is extremely powerful. Customers like SimpleDB’s table interface and its flexible data model. Not having to update their schemas when their systems evolve makes life much easier. However, they most appreciate the fact that SimpleDB just works. It provides multi-data center replication, high availability, and offers rock-solid durability. And yet customers never need to worry about setting up, configuring, or patching their database.
首先，我们了解到，能够消除分布式系统运维难题的数据库服务是极端强大的。客户喜欢SimpleDB中的表接口和灵活的数据模型，当他们的系统演进时不必更新数据表结构（schemas），使生活变得更轻松。然而，他们最欣赏的一点是，SimpleDB总是能够工作，它提供了多数据中心的复制，高可用性，并提供了坚如磐石的耐久性。但客户永远不需要担心设置，配置，或修补其数据库。
Second, most database workloads do not require the complex query and transaction capabilities of a full-blown relational database. A database service that only presents a table interface with a restricted query set is a very important building block for many developers.
其次，大多数数据库操作并不要求成熟的关系型数据库提供的那些复杂的查询和事务的功能。而一个只提供表界面和受约束的查询集的数据库服务，是许多开发者的一个重要基石。
While SimpleDB has been successful and powers the applications of many customers, it has some limitations that customers have consistently asked us to address.
虽然SimpleDB已取得成功并为众多客户提供了强大的动力，但它仍存在一定的局限性，客户一直要求我们解决。
Domain scaling limitations. SimpleDB requires customers to manage their datasets in containers called Domains, which have a finite capacity in terms of storage (10 GB) and request throughput. Although many customers worked around SimpleDB’s scaling limitations by partitioning their workloads over many Domains, this side of SimpleDB is certainly not simple. It also fails to meet the requirement of incremental scalability, something that is critical to many customers looking to adopt a NoSQL solution.
域的扩展限制。SimpleDB的要求客户在容器中管理他们的数据集，这些容器被称为“域”，每个域的存储容量（10GB）和请求吞吐量是有限的。虽然很多客户通过分区（将工作负荷分散到多个域中）的方法绕过了SimpleDB的扩展限制，但这显然不是件简单的事。它也未能满足可增量扩展的要求，而这对于很多希望采用NoSQL解决方案的客户来说是至关重要的。
Predictability of Performance. SimpleDB, in keeping with its goal to be simple, indexes all attributes for each item stored in a domain. While this simplifies the customer experience on schema design and provides query flexibility, it has a negative impact on the predictability of performance. For example, every database write needs to update not just the basic record, but also all attribute indices (regardless of whether the customer is using all the indices for querying). Similarly, since the Domain maintains a large number of indices, its working set does not always fit in memory. This impacts the predictability of a Domain’s read latency, particularly as dataset sizes grow.
性能的可预测性。为与它的目标保持一致，SimpleDB为存储在域中的每个条目的所有属性都建立了索引，这虽然简化了客户设计数据库的过程并且提供了灵活的查询，却对性能的可预测性产生了负面的影响。例如，每一个数据库的写操作除了更新基本的记录以外，还需要更新所有属性的索引（无论客户查询时是否会使用所有的这些索引）；同样，由于域中维护了大量的索引，它的工作集并不总是适合在内存中，这会影响域的读取延迟的可预测性，随着数据集规模的增长，问题会变得突出。
Consistency. SimpleDB’s original implementation had taken the "eventually consistent" approach to the extreme and presented customers with consistency windows that were up to a second in duration. This meant the system was not intuitive to use and developers used to a more traditional database solution had trouble adapting to it. The SimpleDB team eventually addressed this issue by enabling customers to specify whether a given read operation should be strongly or eventually consistent.
一致性，SimpleDB的初始实现采取了“最终一致”的方法并发挥到了极致，这样就存在一个客户可感知的最长可达一秒的”一致性窗口“（即数据需要经过一个过程才能最终达到完全一致的状态）。这样意味着系统的使用是不够直观的，对于熟悉传统数据库的开发者来说也比较难适应。SimpleDB团队最终通过允许客户自定义的方式解决了这个问题，针对一个读操作客户可选择采用严格的一致性还是最终一致性的策略。
Pricing complexity. SimpleDB introduced a very fine-grained pricing dimension called “Machine Hours.” Although most customers have eventually learned how to predict their costs, it was not really transparent or simple.
定价的复杂性。SimpleDB引入了一个非常细粒度的定价纬度，名为“机器时间”（Machine Hours），尽管大部分客户最终都学会了如何计算他们的成本，但这确实不够透明和简单。
Introducing DynamoDB
DynamoDB简介
As we thought about how to address the limitations of SimpleDB and provide 1) the most scalable NoSQL solution available and 2) predictable high performance, we realized our goals could not be met with the SimpleDB APIs. Some SimpleDB operations require that all data for a Domain is on a single server, which prevents us from providing the seamless scalability our customers are demanding. In addition, SimpleDB APIs assume all item attributes are automatically indexed, which limits performance.
当我们思考如何应对SimpleDB存在的不足，并设法提供：1）可扩展性最强的NoSQL解决方案；2）可预测的高性能时，我们意识到，SimpleDB的API可能无法达成这些目标。SimpleDB的一些操作要求某个域的所有数据都存储在同一台服务器上，这样我们就无法提供客户要求的无缝的可扩展能力。此外，SimpleDB的API假设了所有的条目属性都自动建立了索引，这就限制了性能。
We concluded that an ideal solution would combine the best parts of the original Dynamo design (incremental scalability, predictable high performance) with the best parts of SimpleDB (ease of administration of a cloud service, consistency, and a table-based data model that is richer than a pure key-value store). These architectural discussions culminated in Amazon DynamoDB, a new NoSQL service that we are excited to release today.
我们得出的结论是：理想的方案将会是一个能够将Dynamo和SimpleDB的优点合二为一的方案，同时具有Dynamo的可增量扩展性和可预测的高性能，以及SimpleDB易于管理的云端服务、一致性、比纯键/值存储更丰富的基于表的数据模型。这些架构的讨论最终导致了Amazon DynamoDB的诞生，我们很高兴这个全新的NoSQL服务在今天发布了。
Amazon DynamoDB is based on the principles of Dynamo, a progenitor of NoSQL, and brings the power of the cloud to the NoSQL database world. It offers customers high-availability, reliability, and incremental scalability, with no limits on dataset size or request throughput for a given table. And it is fast – it runs on the latest in solid-state drive (SSD) technology and incorporates numerous other optimizations to deliver low latency at any scale.
Amazon DynamoDB是基于NoSQL的先驱，Dynamo的原理而设计的，并将云计算的能力融入到了NoSQL数据库的世界。它给客户提供了高可用性、可靠性和增量式的可扩展能力，并且对任意的一张表来说都没有数据集大小和请求吞吐量的限制。而且它的速度非常快，因为它采用了最新的固态硬盘（SSD）技术，并结合了其他许多优化技术，从而能够在任意的数据规模下提供低延迟的处理能力。
Amazon DynamoDB is the result of everything we’ve learned from building large-scale, non-relational databases for Amazon.com and building highly scalable and reliable cloud computing services at AWS. Amazon DynamoDB is a NoSQL database service that offers the following benefits:
Amazon DynamoDB是我们为Amazon.com构建大规模非关系型数据库和为AWS构建高度可扩展、可靠的云计算服务过程中所积累的经验的结晶。Amazon DynamoDB是一个NoSQL数据库服务，具有以下优点：
Managed. DynamoDB frees developers from the headaches of provisioning hardware and software, setting up and configuring a distributed database cluster, and managing ongoing cluster operations. It handles all the complexities of scaling and partitions and re-partitions your data over more machine resources to meet your I/O performance requirements. It also automatically replicates your data across multiple Availability Zones (and automatically re-replicates in the case of disk or node failures) to meet stringent availability and durability requirements. From our experience of running Amazon.com, we know that manageability is a critical requirement. We have seen many job postings from companies using NoSQL products that are looking for NoSQL database engineers to help scale their installations. We know from our Amazon experiences that once these clusters start growing, managing them becomes the same nightmare that running large RDBMS installations was. Because Amazon DynamoDB is a managed service, you won’t need to hire experts to manage your NoSQL installation—your developers can do it themselves.
它是托管的。DynamoDB使开发者从装配硬件和软件、搭建和配置分布式数据库集群、持续运维集群等众多麻烦事从解脱出来。它能够处理扩展、分区、重分区等所有复杂的操作，将数据分散到更多的机器资源，从而满足I/O性能的要求。它也能够自动的进行跨区域（Zones）的数据复制，包括硬盘、节点失效时的自动复制，以满足严格的可用性和持久性要求。从运营Amazon.com的经验，我们知道可管理性是至关重要的一项要求。我们见过许多使用NoSQL产品的公司张贴的招聘广告，都在寻找NoSQL数据库工程师来帮助他们进行数据库扩展工作。从Amazon的经验，我们知道，一旦集群开始扩展，管理它们将会是一个噩梦，完全不亚于当年运营大型的关系型数据库系统。由于Amazon DynamoDB是一个托管服务，你就不需要聘请专家来管理你的NoSQL系统，你的开发者自己就可以完成了。
Scalable. Amazon DynamoDB is designed to scale the resources dedicated to a table to hundreds or even thousands of servers spread over multiple Availability Zones to meet your storage and throughput requirements. There are no pre-defined limits to the amount of data each table can store. Developers can store and retrieve any amount of data and DynamoDB will spread the data across more servers as the amount of data stored in your table grows.
它是可伸缩的。Amazon DynamoDB被设计为能够将某张表的专用资源扩展到数百甚至数千台跨多个区域的服务器上，从而满足你的存储和吞吐量的要求。每张表允许存储的数据量不存在一个事先定义的上限，开发者可以存取任意数量的数据，随着表中的数据量的增长，DynamoDB将会自动将数据分散到更多的服务器上。
Fast. Amazon DynamoDB provides high throughput at very low latency. It is also built on Solid State Drives to help optimize for high performance even at high scale. Moreover, by not indexing all attributes, the cost of read and write operations is low as write operations involve updating only the primary key index thereby reducing the latency of both read and write operations. An application running in EC2 will typically see average service-side latencies in the single-digit millisecond range for a 1KB object. Most importantly, DynamoDB latencies are predictable. Even as datasets grow, latencies remain stable due to the distributed nature of DynamoDB's data placement and request routing algorithms.
它是快速的。Amazon DynamoDB能够以非常低的延迟来提供高吞吐量。它是基于固态硬盘的，从而优化更大数据规模的处理性能。而且，它不会为所有的属性建立索引，这样，读写操作的成本就被降低到与只涉及主键索引更新的写操作一样，从而读、写操作的延迟都得到了降低。对EC2环境中的应用来说，通常存取一个1KB大小的对象的平均服务端延迟能够稳定在10毫秒以下的水平。更重要的是，DynamoDB的延迟是可以预测的，即使数据集越来越大，其处理延迟仍然能够保持稳定，这是DynamoDB数据存储的分布式特征和请求路由算法决定的。
Durable and Highly Available. Amazon DynamoDB replicates its data over at least 3 different data centers so that the system can continue to operate and serve data even under complex failure scenarios.
它的持久性和高可用性。Amazon DynamoDB会将数据复制到其他至少3个数据中心，因此即使在复杂的故障情况下，系统仍然能够持续的运行和服务。
Flexible. Amazon DynamoDB is an extremely flexible system that does not force its users into a particular data model or a particular consistency model. DynamoDB tables do not have a fixed schema but instead allow each data item to have any number of attributes, including multi-valued attributes. Developers can optionally use stronger consistency models when accessing the database, trading off some performance and availability for a simpler model. They can also take advantage of the atomic increment/decrement functionality of DynamoDB for counters.
它是灵活的。Amazon DynamoDB是一个非常灵活的系统，它不会强制客户使用任何特定的数据模型或者一致性模型。DynamoDB的表没有一个固定的模式，每个数据项都可以拥有任意数量的属性，甚至是多值的属性。在模型较为简单的情况下，开发者可以选择更强的一致性模型来访问数据库，但需要牺牲一定的性能和可用性。他们还可以利用DynamoDB提供的原子的递增/递减计数器的功能。
Low cost. Amazon DynamoDB’s pricing is simple and predictable: Storage is $1 per GB per month. Requests are priced based on how much capacity is reserved: $0.01 per hour for every 10 units of Write Capacity and $0.01 per hour for every 50 units of Read Capacity. A unit of Read (or Write) Capacity equals one read (or write) per second of capacity for items up to 1KB in size. If you use eventually consistent reads, you can achieve twice as many reads per second for a given amount of Read Capacity. Larger items will require additional throughput capacity.
它是低成本的。Amazon DynamoDB的定价简单而明确：存储数据的费用为每GB每月1美元。请求的费用通过预留容量的多少来计算：写请求为每10个单位容量每小时0.01美元，读操作为每50个单位容量每小时0.01美元，一个读（或写）容量单位等于：每秒读（或写）一个不超过1KB的数据项。给定一个读取容量，如果你使用“最终一致”的读取方式，你可以得到多达两倍的读取次数。更大的数据项将会要求更大的吞吐容量。
In the current release, customers will have the choice of using two types of keys for primary index querying: Simple Hash Keys and Composite Hash Key / Range Keys:
当前的版本中，客户作主索引查询时可在两种键类型中选择，简单的哈希键和哈希与范围的复合键：
Simple Hash Key gives DynamoDB the Distributed Hash Table abstraction. The key is hashed over the different partitions to optimize workload distribution. For more background on this please read the original Dynamo paper.
简单哈希键给DynamoDB提供了分布式哈希表的抽象。这个键是通过跨多个分区进行哈希得到的，这样做的目的是优化工作负载的分担。更多的相关信息，请参考原始的Dynamo论文。
Composite Hash Key with Range Key allows the developer to create a primary key that is the composite of two attributes, a “hash attribute” and a “range attribute.” When querying against a composite key, the hash attribute needs to be uniquely matched but a range operation can be specified for the range attribute: e.g. all orders from Werner in the past 24 hours, all log entries from server 16 with clients IP addresses on subnet 192.168.1.0
哈希、范围复合键，允许开发者创建一个包含两个属性的主键：一个“哈希属性”和一个“范围属性”。针对复合键进行查询时，哈希属性需要被唯一匹配，但可以为范围属性指定一个范围操作：例如，Werner 24小时内提交的所有订单，服务器16上所有客户端IP地址属于192.168.1.0子网的日志条目。
Performance Predictability in DynamoDB
DynamoDB性能的可预测性
In addition to taking the best ideas of Dynamo and SimpleDB, we have added new functionality to provide even greater performance predictability.
除了吸收Dynamo和SimpleDB的优点，我们还增加了一些新功能，以便提供更好的性能可预测性。
Cloud-based systems have invented solutions to ensure fairness and present their customers with uniform performance, so that no burst load from any customer should adversely impact others. This is a great approach and makes for many happy customers, but often does not give a single customer the ability to ask for higher throughput if they need it.
基于云的系统已经建立了一套解决方案，以便保证公平性，并为所有的客户提供一致的性能，因此任何客户的突发负荷都不会对其他的客户造成冲击。这是一个令大部分客户满意的好方法，但通常不能够为特定的客户提供他们所需的更高吞吐量要求。
As satisfied as engineers can be with the simplicity of cloud-based solutions, they would love to specify the request throughput they need and let the system reconfigure itself to meet their requirements. Without this ability, engineers often have to carefully manage caching systems to ensure they can achieve low-latency and predictable performance as their workloads scale. This introduces complexity that takes away some of the simplicity of using cloud-based solutions.
工程师们对云端系统的简单性是满意的，但如果他们只需要指定所需的吞吐量要求，系统就能够自动适应，那他们将会一样的喜欢。没有这样的能力，工程师们将被迫小心翼翼的管理缓存系统，以便保证当负载增长时能够提供低延迟和可预测的性能。这样就会引入一些复杂性，从而削弱了采用云计算方案所获得的简单性。
The number of applications that need this type of performance predictability is increasing: online gaming, social graphs applications, online advertising, and real-time analytics to name a few. AWS customers are building increasingly sophisticated applications that could benefit from a database that can give them fast, predictable performance that exactly matches their needs.
对性能可预测性有要求的应用正在日渐增多：在线游戏，社交网络应用，网络广告，实时分析等等。AWS的客户们正在构建越来越复杂的应用，如果数据库能够提供他们所需的快速、可预测的性能，他们将从中获益。
Amazon DynamoDB’s answer to this problem is “Provisioned Throughput.” Customers can now specify the request throughput capacity they require for a given table. Behind the scenes, DynamoDB will allocate sufficient resources to the table to predictably achieve this throughput with low-latency performance. Throughput reservations are elastic, so customers can increase or decrease the throughput capacity of a table on-demand using the AWS Management Console or the DynamoDB APIs. CloudWatch metrics enable customers to make informed decisions about the right amount of throughput to dedicate to a particular table. Customers using the service tell us that it enables them to achieve the appropriate amount of control over scaling and performance while maintaining simplicity. Rather than adding server infrastructure and re-partitioning their data, they simply change a value in the management console and DynamoDB takes care of the rest.
对此，Amazon DynamoDB给出的解决方案是“随需应变的吞吐能力”。客户可以为每张表指定他们所要求的请求吞吐容量。在幕后，DynamoDB将为这张表分配足够的资源，以便能够在指定的吞吐量要求下提供低延迟的性能。吞吐量的预留是弹性的，这样客户就可以按需增加或者减小某张表的吞吐容量，这通过AWS的管理控制台或者DynamoDB的API就能够完成。CloudWatch指标能够帮助客户对某张表适用的吞吐量作出明智的决策。正在使用这些服务的客户告诉我们，这些服务能够帮助他们实现适量的控制扩展性和性能，同时保持简单。不必增加服务器基础设施，也不必将数据进行重新分区，所需的只是在管理控制台中更改一个值，剩下的交给DynamoDB就行了。
Summary
小结
Amazon DynamoDB is designed to maintain predictably high performance and to be highly cost efficient for workloads of any scale, from the smallest to the largest internet-scale applications. You can get started with Amazon DynamoDB using a free tier that enables 40 million of requests per month free of charge. Additional request capacity is priced at cost-efficiently hourly rates as low as $.01 per hour for 10 units of Write Capacity or 50 strongly consistent units of Read Capacity (if you use eventually consistent reads you can get twice the throughput at the same cost, or the same read throughput at half the cost) Also, replicated solid state disk (SSD) storage is $1 per GB per month. Our low request pricing is designed to meet the needs of typical database workloads that perform large numbers of reads and writes against every GB of data stored.
Amazon DynamoDB的设计目标是，在任何的负载规模下，从最小规模到最大的互联网规模，都能够保持可预测的高性能，高效益。你可以从免费级别开始使用Amazon DynamoDB，这个级别可以免费提供每月40,000,000的请求，额外的请求容量定价如下：每小时每10个单位写操作0.01美元，或每小时每50个强一致性单位读操作0.01美元（如果你使用最终一致的读取方式，那么你可以同样的价格获得两倍的吞吐量，或以一半的价格得到相同的吞吐量），同时，复制的固态硬盘（SSD）存储价格是每月每GB 1美元。我们较低的请求定价标准是针对典型的数据库负载模式而设计的，即对以GB为单位存储的数据进行大量的读写操作。
To learn more about Amazon DynamoDB its functionality, APIs, use cases, and service pricing, please visit the detail page at aws.amazon.com/DynamoDB and also the Developer Guide. I am excited to see the years of experience with systems such as Amazon Dynamo result in an innovative database service that can be broadly used by all our customers.
要了解更多关于亚马逊DynamoDB的功能、API、使用场景、服务定价等信息，请访问详细页面 aws.amazon.com/DynamoDB 以及开发指南。我很高兴地看到，Amazon Dynamo等系统多年积累的经验所造就一个创新的数据库服务，能够广泛的为我们的客户所采用。
